[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[project]
name = "moose-spectra"
dynamic = ["version"]
description = "A package to simulate diatomic optical emission spectra relying on line-by-line databases compiled for MassiveOES"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    { name = "Antoine Salden", email = "t.p.w.salden@tue.nl" },
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
]
dependencies = [
    "numpy",
    "pandas",
    "scipy",
]

[project.urls]
Source = "https://github.com/AntoineTUE/Moose"
Documentation = "https://antoinetue.github.io/Moose/"

[project.optional-dependencies]
fit = ["lmfit"]
docs = ["mkdocs-material","mkdocstrings", "mkdocstrings-python", "mkdocs-gen-files", "mkdocs-literate-nav", "mkdocs-section-index", "mkdocs-jupyter", "mkdocs-git-revision-date-localized-plugin","black"]
examples = ["moose-spectra[fit]", "matplotlib", "plotly", "ipywidgets", "panel", "ipympl", "dask"]
all = ["moose-spectra[fit]", "moose-spectra[docs]", "moose-spectra[examples]"]

[tool.hatch.version]
source = "vcs"
fallback-version = "0.0.1dev"

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"

[tool.hatch.build.targets.wheel]
packages = [
    "src/Moose",
]
include =[
    "src/Moose/data"
]

[tool.hatch.build.targets.wheel.sources]
"src" = ""
"data" = "src/Moose/data/*.db"

[tool.hatch.build.targets.sdist]
include = [
    "src/Moose",
    "docs/",
    "mkdocs.yml"
]
exclude = [
    "_version.py"
]

[tool.ruff]
line-length = 120
exclude = ["test", "docs/examples"]

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F","C4", "SIM", "TCH", "NPY", "PD","B","UP","D"]
ignore = ["PD901","F401"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D","F401"]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
fragments = [
    { path = "README.md" }
]

[tool.pytest.ini_options]
markers = ["lmfit: mark test to run when lmfit is present" ]

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.envs.docs]
skip-install = true
features = ["docs"]

[tool.hatch.envs.docs.scripts]
serve = "mkdocs serve -f mkdocs.yml {args}"
build = "mkdocs build --clean -f mkdocs.yml {args}"

[tool.hatch.envs.hatch-test.overrides]
matrix.feature.dependencies = [
  { value = "pandas==1.5.3", if = ["pandas-legacy"], python=["3.10"]},
  { value = "numpy<2.0", if = ["pandas-legacy"], python = ["3.10"] },
  { value = "pandas>=2.0.0", if = ["pandas-2.0"] },
  { value = "numpy>=2.0", if = ["pandas-2.0"] },
]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.9","3.10", "3.11"]
feature = ["pandas-legacy","pandas-2.0"]